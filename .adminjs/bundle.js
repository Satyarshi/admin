(function (React, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  const MyRole = props => {
    const {
      onChange,
      property,
      record
    } = props;
    const roles = [{
      value: 'admin',
      label: 'Admin'
    }, {
      value: 'viewer',
      label: 'Viewer'
    }];
    const selectedRole = record?.params?.[property.name] || '';
    console.log(record);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, property.label), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      value: roles.find(role => role.value === selectedRole),
      options: roles,
      onChange: selected => onChange(property.name, selected?.value || '')
    }));
  };

  const RoleBadge = props => {
    const {
      record,
      property
    } = props;
    const userRole = record?.params?.[property.name] || '';
    const backgroundColor = userRole === 'admin' ? 'green' : 'blue';
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: {
        borderRadius: '12px',
        padding: '10px',
        backgroundColor: backgroundColor,
        color: 'white',
        display: 'inline-block'
      }
    }, userRole);
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.MyRole = MyRole;
  AdminJS.UserComponents.RoleBadge = RoleBadge;

})(React, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9teS1yb2xlLmpzeCIsIi4uL3JvbGUtYmFkZ2UuanN4IiwiZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBCb3gsIExhYmVsLCBTZWxlY3QgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xyXG5cclxuY29uc3QgTXlSb2xlID0gKHByb3BzKSA9PiB7XHJcbiAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHksIHJlY29yZCB9ID0gcHJvcHNcclxuXHJcbiAgY29uc3Qgcm9sZXMgPSBbXHJcbiAgICB7IHZhbHVlOiAnYWRtaW4nLCBsYWJlbDogJ0FkbWluJyB9LFxyXG4gICAgeyB2YWx1ZTogJ3ZpZXdlcicsIGxhYmVsOiAnVmlld2VyJyB9LFxyXG4gIF1cclxuXHJcbiAgY29uc3Qgc2VsZWN0ZWRSb2xlID0gcmVjb3JkPy5wYXJhbXM/Lltwcm9wZXJ0eS5uYW1lXSB8fCAnJ1xyXG4gIGNvbnNvbGUubG9nKHJlY29yZClcclxuICByZXR1cm4gKFxyXG4gICAgPEJveD5cclxuICAgICAgPExhYmVsPntwcm9wZXJ0eS5sYWJlbH08L0xhYmVsPlxyXG4gICAgICA8U2VsZWN0XHJcbiAgICAgICAgdmFsdWU9e3JvbGVzLmZpbmQocm9sZSA9PiByb2xlLnZhbHVlID09PSBzZWxlY3RlZFJvbGUpfVxyXG4gICAgICAgIG9wdGlvbnM9e3JvbGVzfVxyXG4gICAgICAgIG9uQ2hhbmdlPXsoc2VsZWN0ZWQpID0+IG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIHNlbGVjdGVkPy52YWx1ZSB8fCAnJyl9XHJcbiAgICAgIC8+XHJcbiAgICA8L0JveD5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE15Um9sZVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcclxuXHJcbmNvbnN0IFJvbGVCYWRnZSA9IChwcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgcmVjb3JkLCBwcm9wZXJ0eSB9ID0gcHJvcHM7XHJcblxyXG4gIGNvbnN0IHVzZXJSb2xlID0gcmVjb3JkPy5wYXJhbXM/Lltwcm9wZXJ0eS5uYW1lXSB8fCAnJztcclxuXHJcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gdXNlclJvbGUgPT09ICdhZG1pbicgPyAnZ3JlZW4nIDogJ2JsdWUnO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEJveFxyXG4gICAgICBzdHlsZT17e1xyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzEycHgnLCAgICBcclxuICAgICAgICBwYWRkaW5nOiAnMTBweCcsICAgICAgICAgXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXHJcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsICAgICAgICAgIFxyXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLCBcclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAge3VzZXJSb2xlfSAgXHJcbiAgICA8L0JveD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUm9sZUJhZGdlO1xyXG4iLCJBZG1pbkpTLlVzZXJDb21wb25lbnRzID0ge31cbmltcG9ydCBNeVJvbGUgZnJvbSAnLi4vbXktcm9sZSdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuTXlSb2xlID0gTXlSb2xlXG5pbXBvcnQgUm9sZUJhZGdlIGZyb20gJy4uL3JvbGUtYmFkZ2UnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlJvbGVCYWRnZSA9IFJvbGVCYWRnZSJdLCJuYW1lcyI6WyJNeVJvbGUiLCJwcm9wcyIsIm9uQ2hhbmdlIiwicHJvcGVydHkiLCJyZWNvcmQiLCJyb2xlcyIsInZhbHVlIiwibGFiZWwiLCJzZWxlY3RlZFJvbGUiLCJwYXJhbXMiLCJuYW1lIiwiY29uc29sZSIsImxvZyIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsIkJveCIsIkxhYmVsIiwiU2VsZWN0IiwiZmluZCIsInJvbGUiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJSb2xlQmFkZ2UiLCJ1c2VyUm9sZSIsImJhY2tncm91bmRDb2xvciIsInN0eWxlIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsImNvbG9yIiwiZGlzcGxheSIsIkFkbWluSlMiLCJVc2VyQ29tcG9uZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztFQUdBLE1BQU1BLE1BQU0sR0FBSUMsS0FBSyxJQUFLO0lBQ3hCLE1BQU07TUFBRUMsUUFBUTtNQUFFQyxRQUFRO0VBQUVDLElBQUFBO0VBQU8sR0FBQyxHQUFHSCxLQUFLO0lBRTVDLE1BQU1JLEtBQUssR0FBRyxDQUNaO0VBQUVDLElBQUFBLEtBQUssRUFBRSxPQUFPO0VBQUVDLElBQUFBLEtBQUssRUFBRTtFQUFRLEdBQUMsRUFDbEM7RUFBRUQsSUFBQUEsS0FBSyxFQUFFLFFBQVE7RUFBRUMsSUFBQUEsS0FBSyxFQUFFO0VBQVMsR0FBQyxDQUNyQztJQUVELE1BQU1DLFlBQVksR0FBR0osTUFBTSxFQUFFSyxNQUFNLEdBQUdOLFFBQVEsQ0FBQ08sSUFBSSxDQUFDLElBQUksRUFBRTtFQUMxREMsRUFBQUEsT0FBTyxDQUFDQyxHQUFHLENBQUNSLE1BQU0sQ0FBQztJQUNuQixvQkFDRVMsc0JBQUEsQ0FBQUMsYUFBQSxDQUFDQyxnQkFBRyxFQUNGRixJQUFBQSxlQUFBQSxzQkFBQSxDQUFBQyxhQUFBLENBQUNFLGtCQUFLLEVBQUViLElBQUFBLEVBQUFBLFFBQVEsQ0FBQ0ksS0FBYSxDQUFDLGVBQy9CTSxzQkFBQSxDQUFBQyxhQUFBLENBQUNHLG1CQUFNLEVBQUE7RUFDTFgsSUFBQUEsS0FBSyxFQUFFRCxLQUFLLENBQUNhLElBQUksQ0FBQ0MsSUFBSSxJQUFJQSxJQUFJLENBQUNiLEtBQUssS0FBS0UsWUFBWSxDQUFFO0VBQ3ZEWSxJQUFBQSxPQUFPLEVBQUVmLEtBQU07RUFDZkgsSUFBQUEsUUFBUSxFQUFHbUIsUUFBUSxJQUFLbkIsUUFBUSxDQUFDQyxRQUFRLENBQUNPLElBQUksRUFBRVcsUUFBUSxFQUFFZixLQUFLLElBQUksRUFBRTtFQUFFLEdBQ3hFLENBQ0UsQ0FBQztFQUVWLENBQUM7O0VDcEJELE1BQU1nQixTQUFTLEdBQUlyQixLQUFLLElBQUs7SUFDM0IsTUFBTTtNQUFFRyxNQUFNO0VBQUVELElBQUFBO0VBQVMsR0FBQyxHQUFHRixLQUFLO0lBRWxDLE1BQU1zQixRQUFRLEdBQUduQixNQUFNLEVBQUVLLE1BQU0sR0FBR04sUUFBUSxDQUFDTyxJQUFJLENBQUMsSUFBSSxFQUFFO0lBRXRELE1BQU1jLGVBQWUsR0FBR0QsUUFBUSxLQUFLLE9BQU8sR0FBRyxPQUFPLEdBQUcsTUFBTTtFQUUvRCxFQUFBLG9CQUNFVixzQkFBQSxDQUFBQyxhQUFBLENBQUNDLGdCQUFHLEVBQUE7RUFDRlUsSUFBQUEsS0FBSyxFQUFFO0VBQ0xDLE1BQUFBLFlBQVksRUFBRSxNQUFNO0VBQ3BCQyxNQUFBQSxPQUFPLEVBQUUsTUFBTTtFQUNmSCxNQUFBQSxlQUFlLEVBQUVBLGVBQWU7RUFDaENJLE1BQUFBLEtBQUssRUFBRSxPQUFPO0VBQ2RDLE1BQUFBLE9BQU8sRUFBRTtFQUNYO0VBQUUsR0FBQSxFQUVETixRQUNFLENBQUM7RUFFVixDQUFDOztFQ3ZCRE8sT0FBTyxDQUFDQyxjQUFjLEdBQUcsRUFBRTtFQUUzQkQsT0FBTyxDQUFDQyxjQUFjLENBQUMvQixNQUFNLEdBQUdBLE1BQU07RUFFdEM4QixPQUFPLENBQUNDLGNBQWMsQ0FBQ1QsU0FBUyxHQUFHQSxTQUFTOzs7Ozs7In0=
